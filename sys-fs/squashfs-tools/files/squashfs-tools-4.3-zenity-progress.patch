diff -crB 4.3/squashfs4.3/squashfs-tools/caches-queues-lists.h 4.3.neu/squashfs4.3/squashfs-tools/caches-queues-lists.h
*** 4.3/squashfs4.3/squashfs-tools/caches-queues-lists.h	2014-05-10 06:54:13.000000000 +0200
--- 4.3.neu/squashfs4.3/squashfs-tools/caches-queues-lists.h	2018-06-19 22:04:09.127963504 +0200
***************
*** 123,128 ****
--- 123,129 ----
  	char locked;
  	char wait_on_unlock;
  	char noD;
+ 	long _pad;
  	char data[0];
  };
  
diff -crB 4.3/squashfs4.3/squashfs-tools/gzip_wrapper.h 4.3.neu/squashfs4.3/squashfs-tools/gzip_wrapper.h
*** 4.3/squashfs4.3/squashfs-tools/gzip_wrapper.h	2014-05-12 01:29:29.000000000 +0200
--- 4.3.neu/squashfs4.3/squashfs-tools/gzip_wrapper.h	2018-06-19 22:04:09.127963504 +0200
***************
*** 24,30 ****
   *
   */
  
! #ifndef linux
  #define __BYTE_ORDER BYTE_ORDER
  #define __BIG_ENDIAN BIG_ENDIAN
  #define __LITTLE_ENDIAN LITTLE_ENDIAN
--- 24,30 ----
   *
   */
  
! #if !defined(linux) && !defined(__GLIBC__)
  #define __BYTE_ORDER BYTE_ORDER
  #define __BIG_ENDIAN BIG_ENDIAN
  #define __LITTLE_ENDIAN LITTLE_ENDIAN
diff -crB 4.3/squashfs4.3/squashfs-tools/lz4_wrapper.h 4.3.neu/squashfs4.3/squashfs-tools/lz4_wrapper.h
*** 4.3/squashfs4.3/squashfs-tools/lz4_wrapper.h	2014-03-09 06:31:58.000000000 +0100
--- 4.3.neu/squashfs4.3/squashfs-tools/lz4_wrapper.h	2018-06-19 22:04:09.127963504 +0200
***************
*** 24,30 ****
   *
   */
  
! #ifndef linux
  #define __BYTE_ORDER BYTE_ORDER
  #define __BIG_ENDIAN BIG_ENDIAN
  #define __LITTLE_ENDIAN LITTLE_ENDIAN
--- 24,30 ----
   *
   */
  
! #if !defined(linux) && !defined(__GLIBC__)
  #define __BYTE_ORDER BYTE_ORDER
  #define __BIG_ENDIAN BIG_ENDIAN
  #define __LITTLE_ENDIAN LITTLE_ENDIAN
diff -crB 4.3/squashfs4.3/squashfs-tools/lzo_wrapper.h 4.3.neu/squashfs4.3/squashfs-tools/lzo_wrapper.h
*** 4.3/squashfs4.3/squashfs-tools/lzo_wrapper.h	2014-03-09 06:31:59.000000000 +0100
--- 4.3.neu/squashfs4.3/squashfs-tools/lzo_wrapper.h	2018-06-19 22:04:09.127963504 +0200
***************
*** 24,30 ****
   *
   */
  
! #ifndef linux
  #define __BYTE_ORDER BYTE_ORDER
  #define __BIG_ENDIAN BIG_ENDIAN
  #define __LITTLE_ENDIAN LITTLE_ENDIAN
--- 24,30 ----
   *
   */
  
! #if !defined(linux) && !defined(__GLIBC__)
  #define __BYTE_ORDER BYTE_ORDER
  #define __BIG_ENDIAN BIG_ENDIAN
  #define __LITTLE_ENDIAN LITTLE_ENDIAN
diff -crB 4.3/squashfs4.3/squashfs-tools/mksquashfs.c 4.3.neu/squashfs4.3/squashfs-tools/mksquashfs.c
*** 4.3/squashfs4.3/squashfs-tools/mksquashfs.c	2014-05-13 00:18:20.000000000 +0200
--- 4.3.neu/squashfs4.3/squashfs-tools/mksquashfs.c	2018-06-19 22:04:09.131963557 +0200
***************
*** 51,57 ****
  #include <limits.h>
  #include <ctype.h>
  
! #ifndef linux
  #define __BYTE_ORDER BYTE_ORDER
  #define __BIG_ENDIAN BIG_ENDIAN
  #define __LITTLE_ENDIAN LITTLE_ENDIAN
--- 51,57 ----
  #include <limits.h>
  #include <ctype.h>
  
! #if !defined(linux) && !defined(__GLIBC__)
  #define __BYTE_ORDER BYTE_ORDER
  #define __BIG_ENDIAN BIG_ENDIAN
  #define __LITTLE_ENDIAN LITTLE_ENDIAN
***************
*** 59,64 ****
--- 59,65 ----
  #else
  #include <endian.h>
  #include <sys/sysinfo.h>
+ #include <sys/sysmacros.h>
  #endif
  
  #include "squashfs_fs.h"
***************
*** 304,310 ****
  struct dir_info *scan1_opendir(char *pathname, char *subpath, int depth);
  void write_filesystem_tables(struct squashfs_super_block *sBlk, int nopad);
  unsigned short get_checksum_mem(char *buff, int bytes);
! int get_physical_memory();
  
  
  void prep_exit()
--- 305,311 ----
  struct dir_info *scan1_opendir(char *pathname, char *subpath, int depth);
  void write_filesystem_tables(struct squashfs_super_block *sBlk, int nopad);
  unsigned short get_checksum_mem(char *buff, int bytes);
! void check_usable_phys_mem(int total_mem);
  
  
  void prep_exit()
***************
*** 2055,2061 ****
  
  inline int is_fragment(struct inode_info *inode)
  {
! 	int file_size = inode->buf.st_size;
  
  	/*
  	 * If this block is to be compressed differently to the
--- 2056,2062 ----
  
  inline int is_fragment(struct inode_info *inode)
  {
! 	off_t file_size = inode->buf.st_size;
  
  	/*
  	 * If this block is to be compressed differently to the
***************
*** 4053,4063 ****
  		BAD_ERROR("Queue sizes rediculously too large\n");
  	total_mem += fwriteq;
  
! 	if(total_mem > get_physical_memory()) {
! 		ERROR("Total queue sizes larger than physical memory.\n");
! 		ERROR("Mksquashfs will exhaust physical memory and thrash.\n");
! 		BAD_ERROR("Queues too large\n");
! 	}
  
  	/*
  	 * convert from queue size in Mbytes to queue size in
--- 4054,4060 ----
  		BAD_ERROR("Queue sizes rediculously too large\n");
  	total_mem += fwriteq;
  
! 	check_usable_phys_mem(total_mem);
  
  	/*
  	 * convert from queue size in Mbytes to queue size in
***************
*** 4105,4111 ****
  		BAD_ERROR("Failed to set signal mask in intialise_threads\n");
  
  	if(processors == -1) {
! #ifndef linux
  		int mib[2];
  		size_t len = sizeof(processors);
  
--- 4102,4108 ----
  		BAD_ERROR("Failed to set signal mask in intialise_threads\n");
  
  	if(processors == -1) {
! #if !defined(linux) && !defined(__GLIBC__)
  		int mib[2];
  		size_t len = sizeof(processors);
  
***************
*** 4879,4884 ****
--- 4876,4947 ----
  }
  
  
+ void check_usable_phys_mem(int total_mem)
+ {
+ 	/*
+ 	 * We want to allow users to use as much of their physical
+ 	 * memory as they wish.  However, for practical reasons there are
+ 	 * limits which need to be imposed, to protect users from themselves
+ 	 * and to prevent people from using Mksquashfs as a DOS attack by using
+ 	 * all physical memory.   Mksquashfs uses memory to cache data from disk
+ 	 * to optimise performance.  It is pointless to ask it to use more
+ 	 * than 75% of physical memory, as this causes thrashing and it is thus
+ 	 * self-defeating.
+ 	 */
+ 	int mem = get_physical_memory();
+ 
+ 	mem = (mem >> 1) + (mem >> 2); /* 75% */
+ 						
+ 	if(total_mem > mem) {
+ 		ERROR("Total memory requested is more than 75%% of physical "
+ 						"memory.\n");
+ 		ERROR("Mksquashfs uses memory to cache data from disk to "
+ 						"optimise performance.\n");
+ 		ERROR("It is pointless to ask it to use more than this amount "
+ 						"of memory, as this\n");
+ 		ERROR("causes thrashing and it is thus self-defeating.\n");
+ 		BAD_ERROR("Requested memory size too large\n");
+ 	}
+ 
+ 	if(sizeof(void *) == 4 && total_mem > 2048) {
+ 		/*
+ 		 * If we're running on a kernel with PAE or on a 64-bit kernel,
+ 		 * then the 75% physical memory limit can still easily exceed
+ 		 * the addressable memory by this process.
+ 		 *
+ 		 * Due to the typical kernel/user-space split (1GB/3GB, or
+ 		 * 2GB/2GB), we have to conservatively assume the 32-bit
+ 		 * processes can only address 2-3GB.  So refuse if the user
+ 		 * tries to allocate more than 2GB.
+ 		 */
+ 		ERROR("Total memory requested may exceed maximum "
+ 				"addressable memory by this process\n");
+ 		BAD_ERROR("Requested memory size too large\n");
+ 	}
+ }
+ 
+ 
+ int get_default_phys_mem()
+ {
+ 	int mem = get_physical_memory() / SQUASHFS_TAKE;
+ 
+ 	if(sizeof(void *) == 4 && mem > 640) {
+ 		/*
+ 		 * If we're running on a kernel with PAE or on a 64-bit kernel,
+ 		 * the default memory usage can exceed the addressable
+ 		 * memory by this process.
+ 		 * Due to the typical kernel/user-space split (1GB/3GB, or
+ 		 * 2GB/2GB), we have to conservatively assume the 32-bit
+ 		 * processes can only address 2-3GB.  So limit the  default
+ 		 * usage to 640M, which gives room for other data.
+ 		 */
+ 		mem = 640;
+ 	}
+ 
+ 	return mem;
+ }
+ 
+ 
  void calculate_queue_sizes(int mem, int *readq, int *fragq, int *bwriteq,
  							int *fwriteq)
  {
***************
*** 4890,4896 ****
  
  
  #define VERSION() \
! 	printf("mksquashfs version 4.3 (2014/05/12)\n");\
  	printf("copyright (C) 2014 Phillip Lougher "\
  		"<phillip@squashfs.org.uk>\n\n"); \
  	printf("This program is free software; you can redistribute it and/or"\
--- 4953,4959 ----
  
  
  #define VERSION() \
! 	printf("mksquashfs version 4.3-git (2014/06/09)\n");\
  	printf("copyright (C) 2014 Phillip Lougher "\
  		"<phillip@squashfs.org.uk>\n\n"); \
  	printf("This program is free software; you can redistribute it and/or"\
***************
*** 4918,4924 ****
  	int fragq;
  	int bwriteq;
  	int fwriteq;
! 	int total_mem = get_physical_memory() / SQUASHFS_TAKE;
  	int progress = TRUE;
  	int force_progress = FALSE;
  	struct file_buffer **fragment = NULL;
--- 4981,4987 ----
  	int fragq;
  	int bwriteq;
  	int fwriteq;
! 	int total_mem = get_default_phys_mem();
  	int progress = TRUE;
  	int force_progress = FALSE;
  	struct file_buffer **fragment = NULL;
***************
*** 5074,5079 ****
--- 5137,5144 ----
  			progress = FALSE;
  		else if(strcmp(argv[i], "-progress") == 0)
  			force_progress = TRUE;
+     		else if(strcmp(argv[i], "-zenity-progress") == 0)
+       			enable_zenity_progress_bar();
  		else if(strcmp(argv[i], "-no-exports") == 0)
  			exportable = FALSE;
  		else if(strcmp(argv[i], "-processors") == 0) {
***************
*** 5131,5137 ****
  					 argv[0]);
  				exit(1);
  			}
! 			/* convert from bytes to Mbytes */
  			total_mem = number / 1048576;
  			if(total_mem < (SQUASHFS_LOWMEM / SQUASHFS_TAKE)) {
  				ERROR("%s: -mem should be %d Mbytes or "
--- 5196,5211 ----
  					 argv[0]);
  				exit(1);
  			}
! 
! 			/*
! 			 * convert from bytes to Mbytes, ensuring the value
! 			 * does not overflow a signed int
! 			 */
! 			if(number >= (1LL << 51)) {
! 				ERROR("%s: -mem invalid mem size\n", argv[0]);
! 				exit(1);
! 			}
! 
  			total_mem = number / 1048576;
  			if(total_mem < (SQUASHFS_LOWMEM / SQUASHFS_TAKE)) {
  				ERROR("%s: -mem should be %d Mbytes or "
***************
*** 5356,5361 ****
--- 5430,5437 ----
  				"bar\n");
  			ERROR("-progress\t\tdisplay progress bar when using "
  				"the -info option\n");
+       			ERROR("-zenity-progress\toutput formated for use with "
+         			"\"zenity --progress\"\n");
  			ERROR("-processors <number>\tUse <number> processors."
  				"  By default will use number of\n");
  			ERROR("\t\t\tprocessors available\n");
diff -crB 4.3/squashfs4.3/squashfs-tools/progressbar.c 4.3.neu/squashfs4.3/squashfs-tools/progressbar.c
*** 4.3/squashfs4.3/squashfs-tools/progressbar.c	2014-05-10 06:54:13.000000000 +0200
--- 4.3.neu/squashfs4.3/squashfs-tools/progressbar.c	2018-06-19 22:04:09.135963610 +0200
***************
*** 48,53 ****
--- 48,57 ----
  int cur_uncompressed = 0, estimated_uncompressed = 0;
  int columns;
  
+ /* zenity progress */
+ int zenity = FALSE;
+ int current_percent,previous_percent;
+ 
  pthread_t progress_thread;
  pthread_mutex_t progress_mutex = PTHREAD_MUTEX_INITIALIZER;
  
***************
*** 121,131 ****
  			return;
  		previous = current;
  	}
! 
! 	printf("\r[");
  
  	while (hashes --)
! 		putchar('=');
  
  	putchar(rotate_list[rotate]);
  
--- 125,135 ----
  			return;
  		previous = current;
  	}
! 	if (!zenity) {
! 		printf("\r[");
  
  	while (hashes --)
! 			putchar('=');
  
  	putchar(rotate_list[rotate]);
  
***************
*** 134,139 ****
--- 138,149 ----
  
  	printf("] %*lld/%*lld", max_digits, current, max_digits, max);
  	printf(" %3lld%%", current * 100 / max);
+ 	} else {
+       current_percent = current * 100 / max;
+       if (current_percent != previous_percent)
+           printf("%d%%\n", current_percent); 
+         previous_percent = current_percent;
+   }
  	fflush(stdout);
  }
  
***************
*** 148,153 ****
--- 158,167 ----
  	pthread_cleanup_pop(1);
  }
  
+ void enable_zenity_progress_bar()
+ {
+ 	zenity = TRUE;
+ }
  
  void disable_progress_bar()
  {
diff -crB 4.3/squashfs4.3/squashfs-tools/progressbar.h 4.3.neu/squashfs4.3/squashfs-tools/progressbar.h
*** 4.3/squashfs4.3/squashfs-tools/progressbar.h	2014-05-10 06:54:13.000000000 +0200
--- 4.3.neu/squashfs4.3/squashfs-tools/progressbar.h	2018-06-19 22:04:09.139963663 +0200
***************
*** 28,33 ****
--- 28,34 ----
  extern void dec_progress_bar(int count);
  extern void progress_bar_size(int count);
  extern void enable_progress_bar();
+ extern void enable_zenity_progress_bar();
  extern void disable_progress_bar();
  extern void init_progress_bar();
  extern void set_progressbar_state(int);
diff -crB 4.3/squashfs4.3/squashfs-tools/read_fs.c 4.3.neu/squashfs4.3/squashfs-tools/read_fs.c
*** 4.3/squashfs4.3/squashfs-tools/read_fs.c	2014-05-10 06:54:13.000000000 +0200
--- 4.3.neu/squashfs4.3/squashfs-tools/read_fs.c	2018-06-19 22:04:09.139963663 +0200
***************
*** 35,41 ****
  #include <limits.h>
  #include <dirent.h>
  
! #ifndef linux
  #define __BYTE_ORDER BYTE_ORDER
  #define __BIG_ENDIAN BIG_ENDIAN
  #define __LITTLE_ENDIAN LITTLE_ENDIAN
--- 35,41 ----
  #include <limits.h>
  #include <dirent.h>
  
! #if !defined(linux) && !defined(__GLIBC__)
  #define __BYTE_ORDER BYTE_ORDER
  #define __BIG_ENDIAN BIG_ENDIAN
  #define __LITTLE_ENDIAN LITTLE_ENDIAN
diff -crB 4.3/squashfs4.3/squashfs-tools/read_xattrs.c 4.3.neu/squashfs4.3/squashfs-tools/read_xattrs.c
*** 4.3/squashfs4.3/squashfs-tools/read_xattrs.c	2014-03-09 06:31:59.000000000 +0100
--- 4.3.neu/squashfs4.3/squashfs-tools/read_xattrs.c	2018-06-19 22:04:09.143963715 +0200
***************
*** 31,37 ****
  #include <stdio.h>
  #include <string.h>
  
! #ifndef linux
  #define __BYTE_ORDER BYTE_ORDER
  #define __BIG_ENDIAN BIG_ENDIAN
  #define __LITTLE_ENDIAN LITTLE_ENDIAN
--- 31,37 ----
  #include <stdio.h>
  #include <string.h>
  
! #if !defined(linux) && !defined(__GLIBC__)
  #define __BYTE_ORDER BYTE_ORDER
  #define __BIG_ENDIAN BIG_ENDIAN
  #define __LITTLE_ENDIAN LITTLE_ENDIAN
diff -crB 4.3/squashfs4.3/squashfs-tools/squashfs_fs.h 4.3.neu/squashfs4.3/squashfs-tools/squashfs_fs.h
*** 4.3/squashfs4.3/squashfs-tools/squashfs_fs.h	2014-05-10 06:54:13.000000000 +0200
--- 4.3.neu/squashfs4.3/squashfs-tools/squashfs_fs.h	2018-06-19 22:04:09.143963715 +0200
***************
*** 31,36 ****
--- 31,42 ----
  #define SQUASHFS_MAGIC_SWAP		0x68737173
  #define SQUASHFS_START			0
  
+ /*
+  * Squashfs + LZMA
+  */
+ #define SQUASHFS_MAGIC_LZMA		0x71736873
+ #define SQUASHFS_MAGIC_LZMA_SWAP	0x73687371
+ 
  /* size of metadata (inode and directory) blocks */
  #define SQUASHFS_METADATA_SIZE		8192
  #define SQUASHFS_METADATA_LOG		13
diff -crB 4.3/squashfs4.3/squashfs-tools/swap.c 4.3.neu/squashfs4.3/squashfs-tools/swap.c
*** 4.3/squashfs4.3/squashfs-tools/swap.c	2014-03-09 06:31:59.000000000 +0100
--- 4.3.neu/squashfs4.3/squashfs-tools/swap.c	2018-06-19 22:04:09.143963715 +0200
***************
*** 19,25 ****
   * swap.c
   */
  
! #ifndef linux
  #define __BYTE_ORDER BYTE_ORDER
  #define __BIG_ENDIAN BIG_ENDIAN
  #define __LITTLE_ENDIAN LITTLE_ENDIAN
--- 19,25 ----
   * swap.c
   */
  
! #if !defined(linux) && !defined(__GLIBC__)
  #define __BYTE_ORDER BYTE_ORDER
  #define __BIG_ENDIAN BIG_ENDIAN
  #define __LITTLE_ENDIAN LITTLE_ENDIAN
diff -crB 4.3/squashfs4.3/squashfs-tools/unsquash-4.c 4.3.neu/squashfs4.3/squashfs-tools/unsquash-4.c
*** 4.3/squashfs4.3/squashfs-tools/unsquash-4.c	2014-03-09 06:31:59.000000000 +0100
--- 4.3.neu/squashfs4.3/squashfs-tools/unsquash-4.c	2018-06-19 22:04:09.143963715 +0200
***************
*** 31,41 ****
  int read_fragment_table_4(long long *directory_table_end)
  {
  	int res, i;
! 	int bytes = SQUASHFS_FRAGMENT_BYTES(sBlk.s.fragments);
! 	int  indexes = SQUASHFS_FRAGMENT_INDEXES(sBlk.s.fragments);
! 	long long fragment_table_index[indexes];
  
! 	TRACE("read_fragment_table: %d fragments, reading %d fragment indexes "
  		"from 0x%llx\n", sBlk.s.fragments, indexes,
  		sBlk.s.fragment_table_start);
  
--- 31,41 ----
  int read_fragment_table_4(long long *directory_table_end)
  {
  	int res, i;
! 	size_t bytes = SQUASHFS_FRAGMENT_BYTES(sBlk.s.fragments);
! 	size_t indexes = SQUASHFS_FRAGMENT_INDEXES(sBlk.s.fragments);
! 	long long *fragment_table_index;
  
! 	TRACE("read_fragment_table: %u fragments, reading %zu fragment indexes "
  		"from 0x%llx\n", sBlk.s.fragments, indexes,
  		sBlk.s.fragment_table_start);
  
***************
*** 44,49 ****
--- 44,54 ----
  		return TRUE;
  	}
  
+ 	fragment_table_index = malloc(indexes*sizeof(long long));
+ 	if(fragment_table_index == NULL)
+ 		EXIT_UNSQUASH("read_fragment_table: failed to allocate "
+ 			"fragment table index\n");
+ 
  	fragment_table = malloc(bytes);
  	if(fragment_table == NULL)
  		EXIT_UNSQUASH("read_fragment_table: failed to allocate "
diff -crB 4.3/squashfs4.3/squashfs-tools/unsquashfs.c 4.3.neu/squashfs4.3/squashfs-tools/unsquashfs.c
*** 4.3/squashfs4.3/squashfs-tools/unsquashfs.c	2014-05-13 00:18:35.000000000 +0200
--- 4.3.neu/squashfs4.3/squashfs-tools/unsquashfs.c	2018-06-19 22:04:09.147963768 +0200
***************
*** 38,43 ****
--- 38,47 ----
  #include <limits.h>
  #include <ctype.h>
  
+ #ifdef linux
+ #include <sys/sysmacros.h>
+ #endif
+ 
  struct cache *fragment_cache, *data_cache;
  struct queue *to_reader, *to_inflate, *to_writer, *from_writer;
  pthread_t *thread, *inflator_thread;
***************
*** 69,81 ****
  int columns;
  int rotate = 0;
  pthread_mutex_t	screen_mutex;
! int progress = TRUE, progress_enabled = FALSE;
  unsigned int total_blocks = 0, total_files = 0, total_inodes = 0;
  unsigned int cur_blocks = 0;
  int inode_number = 1;
  int no_xattrs = XATTR_DEF;
  int user_xattrs = FALSE;
  
  int lookup_type[] = {
  	0,
  	S_IFDIR,
--- 73,87 ----
  int columns;
  int rotate = 0;
  pthread_mutex_t	screen_mutex;
! int progress = TRUE, progress_enabled = FALSE;int zenity = FALSE;
  unsigned int total_blocks = 0, total_files = 0, total_inodes = 0;
  unsigned int cur_blocks = 0;
  int inode_number = 1;
  int no_xattrs = XATTR_DEF;
  int user_xattrs = FALSE;
  
+ int current_percent,previous_percent=0;
+ 
  int lookup_type[] = {
  	0,
  	S_IFDIR,
***************
*** 821,828 ****
  {
  	struct utimbuf times = { time, time };
  
- 	write_xattr(pathname, xattr);
- 
  	if(utime(pathname, &times) == -1) {
  		ERROR("set_attributes: failed to set time on %s, because %s\n",
  			pathname, strerror(errno));
--- 827,832 ----
***************
*** 845,850 ****
--- 849,856 ----
  		return FALSE;
  	}
  
+ 	write_xattr(pathname, xattr);
+ 
  	return TRUE;
  }
  
***************
*** 1783,1792 ****
  	 */
  	read_fs_bytes(fd, SQUASHFS_START, sizeof(struct squashfs_super_block),
  		&sBlk_4);
! 	swap = sBlk_4.s_magic != SQUASHFS_MAGIC;
  	SQUASHFS_INSWAP_SUPER_BLOCK(&sBlk_4);
  
! 	if(sBlk_4.s_magic == SQUASHFS_MAGIC && sBlk_4.s_major == 4 &&
  			sBlk_4.s_minor == 0) {
  		s_ops.squashfs_opendir = squashfs_opendir_4;
  		s_ops.read_fragment = read_fragment_4;
--- 1789,1800 ----
  	 */
  	read_fs_bytes(fd, SQUASHFS_START, sizeof(struct squashfs_super_block),
  		&sBlk_4);
! 	swap = (sBlk_4.s_magic != SQUASHFS_MAGIC &&
! 		sBlk_4.s_magic != SQUASHFS_MAGIC_LZMA);
  	SQUASHFS_INSWAP_SUPER_BLOCK(&sBlk_4);
  
! 	if((sBlk_4.s_magic == SQUASHFS_MAGIC ||
! 			sBlk_4.s_magic == SQUASHFS_MAGIC_LZMA) && sBlk_4.s_major == 4 &&
  			sBlk_4.s_minor == 0) {
  		s_ops.squashfs_opendir = squashfs_opendir_4;
  		s_ops.read_fragment = read_fragment_4;
***************
*** 1799,1805 ****
  		/*
  		 * Check the compression type
  		 */
! 		comp = lookup_compressor_id(sBlk.s.compression);
  		return TRUE;
  	}
  
--- 1807,1817 ----
  		/*
  		 * Check the compression type
  		 */
! 		if (sBlk_4.s_magic == SQUASHFS_MAGIC_LZMA)
! 			comp = lookup_compressor("lzma");
! 		else
! 			comp = lookup_compressor_id(sBlk.s.compression);
! 
  		return TRUE;
  	}
  
***************
*** 1814,1821 ****
  	 * Check it is a SQUASHFS superblock
  	 */
  	swap = 0;
! 	if(sBlk_3.s_magic != SQUASHFS_MAGIC) {
! 		if(sBlk_3.s_magic == SQUASHFS_MAGIC_SWAP) {
  			squashfs_super_block_3 sblk;
  			ERROR("Reading a different endian SQUASHFS filesystem "
  				"on %s\n", source);
--- 1826,1835 ----
  	 * Check it is a SQUASHFS superblock
  	 */
  	swap = 0;
! 	if(sBlk_3.s_magic != SQUASHFS_MAGIC &&
! 			sBlk_3.s_magic != SQUASHFS_MAGIC_LZMA) {
! 		if(sBlk_3.s_magic == SQUASHFS_MAGIC_SWAP ||
! 				sBlk_3.s_magic == SQUASHFS_MAGIC_LZMA_SWAP) {
  			squashfs_super_block_3 sblk;
  			ERROR("Reading a different endian SQUASHFS filesystem "
  				"on %s\n", source);
***************
*** 1893,1899 ****
  	/*
  	 * 1.x, 2.x and 3.x filesystems use gzip compression.
  	 */
! 	comp = lookup_compressor("gzip");
  	return TRUE;
  
  failed_mount:
--- 1907,1917 ----
  	/*
  	 * 1.x, 2.x and 3.x filesystems use gzip compression.
  	 */
! 	if (sBlk.s.s_magic == SQUASHFS_MAGIC_LZMA)
! 		comp = lookup_compressor("lzma");
! 	else
! 		comp = lookup_compressor("gzip");
! 
  	return TRUE;
  
  failed_mount:
***************
*** 2190,2196 ****
  			"\n");
  
  	if(processors == -1) {
! #ifndef linux
  		int mib[2];
  		size_t len = sizeof(processors);
  
--- 2208,2214 ----
  			"\n");
  
  	if(processors == -1) {
! #if !defined(linux) && !defined(__GLIBC__)
  		int mib[2];
  		size_t len = sizeof(processors);
  
***************
*** 2427,2446 ****
  			return;
  		previous = current;
  	}
  
! 	printf("\r[");
  
! 	while (hashes --)
! 		putchar('=');
  
! 	putchar(rotate_list[rotate]);
! 
! 	while(spaces --)
! 		putchar(' ');
! 
! 	printf("] %*lld/%*lld", max_digits, current, max_digits, max);
! 	printf(" %3lld%%", current * 100 / max);
  	fflush(stdout);
  }
  
  
--- 2445,2470 ----
  			return;
  		previous = current;
  	}
+ 	if (!zenity) {
+ 		printf("\r[");
  
! 		while (hashes --)
! 			putchar('=');
  
! 		putchar(rotate_list[rotate]);
  
! 		while(spaces --)
! 			putchar(' ');
! 
! 		printf("] %*lld/%*lld", max_digits, current, max_digits, max);
! 		printf(" %3lld%%", current * 100 / max);
! 	}	else {
! 			current_percent = current * 100 / max;
! 			if (current_percent != previous_percent)
! 				printf("%d%%\n", current_percent);
! 				previous_percent = current_percent;
  	fflush(stdout);
+ 	}
  }
  
  
***************
*** 2526,2531 ****
--- 2550,2557 ----
  		else if(strcmp(argv[i], "-no-progress") == 0 ||
  				strcmp(argv[i], "-n") == 0)
  			progress = FALSE;
+ 		else if(strcmp(argv[i], "-zenity-progress") == 0)
+ 			zenity = TRUE;
  		else if(strcmp(argv[i], "-no-xattrs") == 0 ||
  				strcmp(argv[i], "-no") == 0)
  			no_xattrs = TRUE;
***************
*** 2638,2643 ****
--- 2664,2671 ----
  				"default \"squashfs-root\"\n");
  			ERROR("\t-n[o-progress]\t\tdon't display the progress "
  				"bar\n");
+ 			ERROR("\t-zenity-progress\toutput formated for use with "
+ 				"\"zenity --progress\"\n");
  			ERROR("\t-no[-xattrs]\t\tdon't extract xattrs in file system"
  				NOXOPT_STR"\n");
  			ERROR("\t-x[attrs]\t\textract xattrs in file system"
diff -crB 4.3/squashfs4.3/squashfs-tools/unsquashfs.h 4.3.neu/squashfs4.3/squashfs-tools/unsquashfs.h
*** 4.3/squashfs4.3/squashfs-tools/unsquashfs.h	2014-05-10 06:54:13.000000000 +0200
--- 4.3.neu/squashfs4.3/squashfs-tools/unsquashfs.h	2018-06-19 22:04:09.147963768 +0200
***************
*** 47,53 ****
  #include <sys/ioctl.h>
  #include <sys/time.h>
  
! #ifndef linux
  #define __BYTE_ORDER BYTE_ORDER
  #define __BIG_ENDIAN BIG_ENDIAN
  #define __LITTLE_ENDIAN LITTLE_ENDIAN
--- 47,53 ----
  #include <sys/ioctl.h>
  #include <sys/time.h>
  
! #if !defined(linux) && !defined(__GLIBC__)
  #define __BYTE_ORDER BYTE_ORDER
  #define __BIG_ENDIAN BIG_ENDIAN
  #define __LITTLE_ENDIAN LITTLE_ENDIAN
diff -crB 4.3/squashfs4.3/squashfs-tools/xz_wrapper.h 4.3.neu/squashfs4.3/squashfs-tools/xz_wrapper.h
*** 4.3/squashfs4.3/squashfs-tools/xz_wrapper.h	2014-03-09 06:31:59.000000000 +0100
--- 4.3.neu/squashfs4.3/squashfs-tools/xz_wrapper.h	2018-06-19 22:04:09.147963768 +0200
***************
*** 24,30 ****
   *
   */
  
! #ifndef linux
  #define __BYTE_ORDER BYTE_ORDER
  #define __BIG_ENDIAN BIG_ENDIAN
  #define __LITTLE_ENDIAN LITTLE_ENDIAN
--- 24,30 ----
   *
   */
  
! #if !defined(linux) && !defined(__GLIBC__)
  #define __BYTE_ORDER BYTE_ORDER
  #define __BIG_ENDIAN BIG_ENDIAN
  #define __LITTLE_ENDIAN LITTLE_ENDIAN
